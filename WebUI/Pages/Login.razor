@page "/login"
@using System.Security
@using OraEmp.Application.Services
@using OraEmp.Infrastructure.Identity
@inject NavigationManager _navigationManager
@inject AuthenticationStateProvider _authStateProvider
@inject IdentityInformation _identity;

<label class="text-danger">@errorMessage</label>

@if (_devdeployment)
{
    <div class="page">
    <h1 class="h2 font-weight-normal login-title">
        This form appears only in development
    </h1>
    <h6>Please enter username without <b>IDIR\</b></h6>
    <EditForm class="form-inline" Model="_model" OnValidSubmit="onSubmit">
        <label for="idirUser" class="sr-only">User Name</label>
        <InputText id="idirUser" class="form-control" @bind-Value="_model.loginUser"/>
        <button class="btn btn-primary" type="submit">Login</button>
    </EditForm>
    <div class="alert-info">Usernames available for testing security</div>
        <ul>
            <li>calin</li>
            <ul>
                <li>ADMINISTRATOR</li>
                <li>USER</li>
            </ul>
            <li>administrator:ADMINISTRATOR</li>
            <li>user:USER</li>
            <li>noroles:(No Roles)</li>
        </ul>
    </div>
}
@code{
    private bool _devdeployment = true;
    [AllowAnonymous]
    class FormModel
    {
        public string loginUser { get; set; }
    }

    private readonly FormModel _model = new FormModel();

    string errorMessage { get; set; }

    private async Task onSubmit()
    {
        var authStateProvider = ((EmpAuthenticationStateProvider) _authStateProvider);

        if (_identity.State.Username is null)
        {
            if (string.IsNullOrEmpty(_model.loginUser))
            {
                return;
            }
            bool success = await authStateProvider.Login(_model.loginUser);
            if (success)
            {
                _navigationManager.NavigateTo("");
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        // login here if siteminder
    }
}